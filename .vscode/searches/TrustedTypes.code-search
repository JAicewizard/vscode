# Query: .innerHTML = 
# Flags: CaseSensitive WordMatch
# Including: src/vs/**/*.{t,j}s
# Excluding: *.test.ts, **/test/**
# ContextLines: 3

15 results - 11 files

src/vs/base/browser/markdownRenderer.ts:
  272  	};
  273  
  274  	if (_ttpInsane) {
  275: 		element.innerHTML = _ttpInsane.createHTML(renderedMarkdown, insaneOptions) as unknown as string;
  276  	} else {
  277: 		element.innerHTML = insane(renderedMarkdown, insaneOptions);
  278  	}
  279  
  280  	// signal that async code blocks can be now be inserted

src/vs/base/browser/ui/contextview/contextview.ts:
  157  				this.shadowRootHostElement = DOM.$('.shadow-root-host');
  158  				this.container.appendChild(this.shadowRootHostElement);
  159  				this.shadowRoot = this.shadowRootHostElement.attachShadow({ mode: 'open' });
  160: 				this.shadowRoot.innerHTML = `
  161  					<style>
  162  						${SHADOW_ROOT_CSS}
  163  					</style>

src/vs/code/electron-sandbox/issue/issueReporterMain.ts:
  58  	const platformClass = platform.isWindows ? 'windows' : platform.isLinux ? 'linux' : 'mac';
  59  	document.body.classList.add(platformClass); // used by our fonts
  60  
  61: 	document.body.innerHTML = BaseHtml();
  62  	const issueReporter = new IssueReporter(configuration);
  63  	issueReporter.render();
  64  	document.body.style.display = 'block';

src/vs/editor/browser/core/markdownRenderer.ts:
  88  
  89  				const element = document.createElement('span');
  90  
  91: 				element.innerHTML = MarkdownRenderer._ttpTokenizer
  92  					? MarkdownRenderer._ttpTokenizer.createHTML(value, tokenization) as unknown as string
  93  					: tokenizeToString(value, tokenization);
  94  

src/vs/editor/browser/view/domLineBreaksComputer.ts:
  107  		allCharOffsets[i] = tmp[0];
  108  		allVisibleColumns[i] = tmp[1];
  109  	}
  110: 	containerDomNode.innerHTML = sb.build();
  111  
  112  	containerDomNode.style.position = 'absolute';
  113  	containerDomNode.style.top = '10000';

src/vs/editor/browser/view/viewLayer.ts:
  512  		}
  513  		const lastChild = <HTMLElement>this.domNode.lastChild;
  514  		if (domNodeIsEmpty || !lastChild) {
  515: 			this.domNode.innerHTML = newLinesHTML;
  516  		} else {
  517  			lastChild.insertAdjacentHTML('afterend', newLinesHTML);
  518  		}

  533  		if (ViewLayerRenderer._ttPolicy) {
  534  			invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML) as unknown as string;
  535  		}
  536: 		hugeDomNode.innerHTML = invalidLinesHTML;
  537  
  538  		for (let i = 0; i < ctx.linesLength; i++) {
  539  			const line = ctx.lines[i];

src/vs/editor/browser/widget/diffEditorWidget.ts:
  2157  
  2158  		let domNode = document.createElement('div');
  2159  		domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;
  2160: 		domNode.innerHTML = sb.build();
  2161  		Configuration.applyFontInfoSlow(domNode, fontInfo);
  2162  
  2163  		let marginDomNode = document.createElement('div');
  2164  		marginDomNode.className = 'inline-deleted-margin-view-zone';
  2165: 		marginDomNode.innerHTML = marginHTML.join('');
  2166  		Configuration.applyFontInfoSlow(marginDomNode, fontInfo);
  2167  
  2168  		return {

src/vs/editor/standalone/browser/colorizer.ts:
  40  		let text = domNode.firstChild ? domNode.firstChild.nodeValue : '';
  41  		domNode.className += ' ' + theme;
  42  		let render = (str: string) => {
  43: 			domNode.innerHTML = str;
  44  		};
  45  		return this.colorize(modeService, text || '', mimeType, options).then(render, (err) => console.error(err));
  46  	}

src/vs/workbench/contrib/notebook/browser/view/renderers/cellRenderer.ts:
  580  		const element = DOM.$('div', { style });
  581  
  582  		const linesHtml = this.getRichTextLinesAsHtml(model, modelRange, colorMap);
  583: 		element.innerHTML = linesHtml as unknown as string;
  584  		return element;
  585  	}
  586  

src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts:
  375  					addMouseoverListeners(outputNode, outputId);
  376  					const content = data.content;
  377  					if (content.type === RenderOutputType.Html) {
  378: 						outputNode.innerHTML = content.htmlContent;
  379  						cellOutputContainer.appendChild(outputNode);
  380  						domEval(outputNode);
  381  					} else if (preloadErrs.some(e => !!e)) {

src/vs/workbench/contrib/welcome/walkThrough/browser/walkThroughPart.ts:
  280  
  281  				const content = model.main;
  282  				if (!input.resource.path.endsWith('.md')) {
  283: 					this.content.innerHTML = content;
  284  					this.updateSizeClasses();
  285  					this.decorateContent();
  286  					this.contentDisposables.push(this.keybindingService.onDidUpdateKeybindings(() => this.decorateContent()));

  302  				const innerContent = document.createElement('div');
  303  				innerContent.classList.add('walkThroughContent'); // only for markdown files
  304  				const markdown = this.expandMacros(content);
  305: 				innerContent.innerHTML = marked(markdown, { renderer });
  306  				this.content.appendChild(innerContent);
  307  
  308  				model.snippets.forEach((snippet, i) => {
